---
import {data} from "@data";
import {createLogo} from "@utils";
const bottomLinks = data.footer.links;
---

<footer
        class="bg-primary-500/10 dark:bg-primary-400/10 mt-16 py-16 lg:mt-20 lg:py-20"
        aria-labelledby="footer-heading"
>
    <h2 id="footer-heading" class="sr-only">Footer</h2>
    <div class="mx-auto max-w-2xl px-4 sm:px-6 lg:max-w-7xl lg:px-8">
        <div class="flex flex-col justify-between gap-12 sm:gap-16 lg:flex-row">
            <div class="flex max-w-sm flex-col items-start gap-6 sm:gap-8">
                <a
                        href="/"
                        class="focus-visible:outline-primary-950 dark:group-focus-visible:outline-primary-200 rounded-md focus-visible:outline focus-visible:outline-2 text-2xl dark:text-light font-semibold dark:font-semibold font-outfit"
                >
                    <b class="text-secondary">|</b> {createLogo(data.name)}
                </a>
                <p class="typewriter typewriter-text-sm text-primary-950/70 dark:text-primary-200/70 text-base border-r-2 border-transparent dark:border-white">
                </p>
                <p class="text-primary-950/70 dark:text-primary-200/70 text-sm">Â© 2024 {data.name}</p>
            </div>

            <!-- Bottom links -->
            <div class="grid max-w-xl flex-1 grid-cols-1 gap-8 sm:grid-cols-3">
                {
                    bottomLinks.map((group) => (
                            <div class="flex flex-col gap-4">
                                <p class="text-base font-medium">{group.header}</p>
                                <ul role="list" class="flex flex-col gap-3">
                                    {group.links.map((link) => (
                                            <li>
                                                <a
                                                        href={link.href}
                                                        class="focus-visible:outline-primary-950 dark:focus-visible:outline-primary-200 inline-flex items-center gap-1 rounded-md text-base hover:underline focus-visible:outline focus-visible:outline-2"
                                                        target={link.isExternal ? '_blank' : undefined}
                                                        rel={link.isExternal ? 'noopener' : undefined}
                                                >
                                                    {link.name}
                                                    {link.isExternal && (
                                                            <svg
                                                                    class="h-4 w-4"
                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                    viewBox="0 0 24 24"
                                                                    fill="currentColor"
                                                                    aria-hidden="true"
                                                            >
                                                                <path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"/>
                                                            </svg>
                                                    )}
                                                </a>
                                            </li>
                                    ))}
                                </ul>
                            </div>
                    ))
                }
            </div>
        </div>
    </div>
</footer>

<style>
    .typewriter-text-sm {
        min-height: 2em;
        overflow: hidden;
        padding-right: 0.5em;
        animation: blink-cursor 0.75s step-end infinite;
    }

    @keyframes blink-cursor {
        from, to {
            border-color: transparent;
        }
        50% {
            border-color: inherit;
        }
    }

</style>

<script client:only type="module">
    document.addEventListener('DOMContentLoaded', () => {
        const typewriters = document.querySelectorAll('.typewriter');
        typewriters.forEach(initTypewriter);
    });

    function initTypewriter(typewriter) {
        const texts = ["I am a software engineer", "I am a full-stack developer", "I am a data analyst"];
        let count = 0;
        let index = 0;
        let currentText = '';
        let letter = '';

        function type() {
            if (count === texts.length) {
                count = 0;
            }
            currentText = texts[count];
            letter = currentText.slice(0, ++index);

            typewriter.textContent = letter;
            if (letter.length === currentText.length) {
                setTimeout(() => erase(), 2000);
            } else {
                setTimeout(type, 120);
            }
        }

        function erase() {
            letter = currentText.slice(0, --index);
            typewriter.textContent = letter;

            if (letter.length === 0) {
                count++;
                index = 0;
                setTimeout(type, 1000);
            } else {
                setTimeout(erase, 60);
            }
        }

        setTimeout(type, 1000); // Delay the start to simulate initial typing delay
    }
</script>